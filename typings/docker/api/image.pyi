"""This type stub file was generated by pyright."""
# pylint: disable=C,E,W,R
from __future__ import annotations

from docker import utils

log = ...

class ImageApiMixin:
    @utils.check_resource("image")
    def get_image(self, image, chunk_size=...): ...
    @utils.check_resource("image")
    def history(self, image): ...
    def images(self, name=..., quiet=..., all=..., filters=...): ...
    def import_image(
        self, src=..., repository=..., tag=..., image=..., changes=..., stream_src=...
    ): ...
    def import_image_from_data(self, data, repository=..., tag=..., changes=...): ...
    def import_image_from_file(
        self, filename, repository=..., tag=..., changes=...
    ): ...
    def import_image_from_stream(
        self, stream, repository=..., tag=..., changes=...
    ): ...
    def import_image_from_url(self, url, repository=..., tag=..., changes=...): ...
    def import_image_from_image(self, image, repository=..., tag=..., changes=...): ...
    @utils.check_resource("image")
    def inspect_image(self, image): ...
    @utils.minimum_version("1.30")
    @utils.check_resource("image")
    def inspect_distribution(self, image, auth_config=...): ...
    def load_image(self, data, quiet=...): ...
    @utils.minimum_version("1.25")
    def prune_images(self, filters=...): ...
    def pull(
        self,
        repository,
        tag=...,
        stream=...,
        auth_config=...,
        decode=...,
        platform=...,
        all_tags=...,
    ): ...
    def push(self, repository, tag=..., stream=..., auth_config=..., decode=...): ...
    @utils.check_resource("image")
    def remove_image(self, image, force=..., noprune=...): ...
    def search(self, term, limit=...): ...
    @utils.check_resource("image")
    def tag(self, image, repository, tag=..., force=...): ...

def is_file(src): ...
