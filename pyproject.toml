[tool.poetry]
name = "awslambda"
version = "0.0.0"
description = "Runway hook for AWS Lambda."
authors = ["Kyle Finley <kyle@finley.sh>"]
license = "Apache-2.0"

[tool.poetry.dependencies]
python = "^3.8"

runway = { git = "https://github.com/onicagroup/runway.git", branch = "master" }
tomli = "^1.1.0"
igittigitt = "^2.0.4"

[tool.poetry.dev-dependencies]
black = "21.7b0"
boto3-stubs = { extras = ["s3"], version = "^1.16" }
coverage = "^5.5"
flake8 = "^3.9.2"
flake8-bugbear = "^21.4.3"  # flake8 plugin
flake8-comprehensions = "^3.5.0"  # flake8 plugin
flake8-docstrings = "^1.6.0"  # flake8 plugin
flake8-print = "^4.0.0"  # flake8 plugin
flake8-use-fstring = "^1.1"  # flake8 plugin
isort = "^5.9.2"
mock = "^4.0.3"
pep8-naming = "^0.12.1"  # flake8 plugin
pre-commit = "^2.10.1"
pydocstyle = "^6.1.1"
pylint = "<2.9, !=2.8.3"  # 2.9 is broken; 2.8.3 locks down astriod too much
pytest = "^6.2.2"
pytest-cov = "^2.12.1"
pytest-mock = "^3.5.1"
recommonmark = "^0.7"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
force-exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 88
target-version = ["py38", "py39"]


[tool.isort]
profile = "black"
skip = [
  ".eggs",
  ".git",
  ".runway",
  ".serverless",
  ".venv",
  "_build",
  "build",
  "dist",
  "node_modules",
]


[tool.pylint.basic]
good-names = [ "_", "a", "b", "ca", "ci", "db", "f", "fn", "i", "id", "j", "k", "ok", "s3", "ui", "up", "v",]

[tool.pylint.classes]
defining-attr-methods = [ "__init__", "__new__",]

[tool.pylint.design]
max-args = 50
max-attributes = 50
max-bool-expr = 5
max-branches = 20
max-locals = 25
max-parents = 10
max-public-methods = 30
max-returns = 6
max-statements = 50
min-public-methods = 0

[tool.pylint.format]
max-line-length = 100
max-module-lines = 1000

[tool.pylint.imports]
allow-wildcard-with-all = "no"

[tool.pylint.logging]
logging-format-style = "old"

[tool.pylint.master]
extension-pkg-whitelist = [
  "pydantic",  # https://github.com/samuelcolvin/pydantic/issues/992#issuecomment-553545180
]
jobs = 0

[tool.pylint.message_control]
disable = [
  "line-too-long",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "similarities",
  "ungrouped-imports",
]

[tool.pylint.miscellaneous]
notes = [
  "FIXME",
]

[tool.pylint.reports]
msg-template = "{path}:{line}:{column}: {msg_id}: {msg} ({symbol})"
output-format = "colorized"
score = "yes"
